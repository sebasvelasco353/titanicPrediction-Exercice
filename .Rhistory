library(ggdendro)
library(protoclust)
str(mpg)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
library(ggplot2)
library(ggdendro)
library(protoclust)
str(mpg)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
d <- dist(mpg2008N)
str(d)
d <- dist(mpg2008N)
library(protoclust)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
library(protoclust)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
#install.packages("ggdendro")
#install.packages("protoclust")
library(ggplot2)
library(ggdendro)
library(protoclust)
str(mpg)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
d <- dist(mpg2008N)
str(d)
hc2008 <- hclust(d)
str(hc2008)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=2)
p
dhc2008 <- as.dendrogram(hc2008)
# Obtenga la informaci<U+00F3>n, lineas son ortogonales
dhc_data2008 <- dendro_data(dhc2008, type = "rectangle")
# Estructura de dhc_data2008
str(dhc_data2008)
# Para darle formato a la imagen. Simplemente cambia las dimensiones del
# gr<U+00E1>fico
knitr::opts_chunk$set(fig.width = 15, fig.height = 10, fig.path = "Figs/", echo = TRUE,
warning = FALSE, message = FALSE)
p <- ggplot(segment(dhc_data2008)) + geom_segment(aes(x = x, y = y, xend = xend,
yend = yend, color = as.factor(xend)))
p <- p + coord_flip()
# quite el background
p <- p + theme_dendro()
p
# Function to color branches
colbranches <- function(n, col) {
a <- attributes(n) # Find the attributes of current node
# Color edges with requested color
attr(n, "edgePar") <- c(a$edgePar, list(col = col, lwd = 2))
n # Don't forget to return the node!
}
# Color the first sub-branch of the first branch in red, the second
# sub-branch in orange and the second branch in blue
dhc2008[[1]][[1]] = dendrapply(dhc2008[[1]][[1]], colbranches, "red")
dhc2008[[1]][[2]] = dendrapply(dhc2008[[1]][[2]], colbranches, "orange")
dhc2008[[2]][[2]][[1]][[2]][[2]] = dendrapply(dhc2008[[2]][[2]][[1]][[2]][[2]],
colbranches, "blue")
# Plot
plot(dhc2008)
library(protoclust)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
install.packages(ggplot, ggdendro, protoclust)
install.packages(protoclust)
install.packages("ggplot2")
install.packages("ggdendro")
install.packages("protoclust")
library(ggplot2)
library(ggdendro)
library(protoclust)
str(mpg)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
d <- dist(mpg2008N)
str(d)
hc2008 <- hclust(d)
str(hc2008)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=2)
p
dhc2008 <- as.dendrogram(hc2008)
# Obtenga la informaci<U+00F3>n, lineas son ortogonales
dhc_data2008 <- dendro_data(dhc2008, type = "rectangle")
# Estructura de dhc_data2008
str(dhc_data2008)
knitr::opts_chunk$set(fig.width = 15, fig.height = 10, fig.path = "Figs/", echo = TRUE,
warning = FALSE, message = FALSE)
p <- ggplot(segment(dhc_data2008)) + geom_segment(aes(x = x, y = y, xend = xend,
yend = yend, color = as.factor(xend)))
p <- p + coord_flip()
# quite el background
p <- p + theme_dendro()
p
# Function to color branches
colbranches <- function(n, col) {
a <- attributes(n) # Find the attributes of current node
# Color edges with requested color
attr(n, "edgePar") <- c(a$edgePar, list(col = col, lwd = 2))
n # Don't forget to return the node!
}
# Color the first sub-branch of the first branch in red, the second
# sub-branch in orange and the second branch in blue
dhc2008[[1]][[1]] = dendrapply(dhc2008[[1]][[1]], colbranches, "red")
dhc2008[[1]][[2]] = dendrapply(dhc2008[[1]][[2]], colbranches, "orange")
dhc2008[[2]][[2]][[1]][[2]][[2]] = dendrapply(dhc2008[[2]][[2]][[1]][[2]][[2]],
colbranches, "blue")
# Plot
plot(dhc2008)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=15)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
dist2 <- dist(mpg2008)
protoC <- protoclust(dist2)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=15)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
d <- dist(mpg2008N)
str(d)
#install.packages("ggplot2")
#install.packages("ggdendro")
#install.packages("protoclust")
library(ggplot2)
library(ggdendro)
library(protoclust)
str(mpg)
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
d <- dist(mpg2008N)
str(d)
hc2008 <- hclust(d)
str(hc2008)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=2)
p
dhc2008 <- as.dendrogram(hc2008)
# Obtenga la informaci<U+00F3>n, lineas son ortogonales
dhc_data2008 <- dendro_data(dhc2008, type = "rectangle")
# Estructura de dhc_data2008
str(dhc_data2008)
# Para darle formato a la imagen. Simplemente cambia las dimensiones del
# gr<U+00E1>fico
knitr::opts_chunk$set(fig.width = 15, fig.height = 10, fig.path = "Figs/", echo = TRUE,
warning = FALSE, message = FALSE)
p <- ggplot(segment(dhc_data2008)) + geom_segment(aes(x = x, y = y, xend = xend,
yend = yend, color = as.factor(xend)))
p <- p + coord_flip()
# quite el background
p <- p + theme_dendro()
p
# Function to color branches
colbranches <- function(n, col) {
a <- attributes(n) # Find the attributes of current node
# Color edges with requested color
attr(n, "edgePar") <- c(a$edgePar, list(col = col, lwd = 2))
n # Don't forget to return the node!
}
# Color the first sub-branch of the first branch in red, the second
# sub-branch in orange and the second branch in blue
dhc2008[[1]][[1]] = dendrapply(dhc2008[[1]][[1]], colbranches, "red")
dhc2008[[1]][[2]] = dendrapply(dhc2008[[1]][[2]], colbranches, "orange")
dhc2008[[2]][[2]][[1]][[2]][[2]] = dendrapply(dhc2008[[2]][[2]][[1]][[2]][[2]],
colbranches, "blue")
# Plot
plot(dhc2008)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=2)
p
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=15)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=15)
p
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=15)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=85)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
library(ggplot2)
library(ggdendro)
library(protoclust)
#str(mpg)
#
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
#creo IDs unicos y concateno con el manufacturer
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
#Calculo las distacias euclidianas
d <- dist(mpg2008N)
str(d)
##Creo el objeto hclust y lo grafico
hc2008 <- hclust(d)
str(hc2008)
# hang alinea los textos
p <- ggdendrogram (hc2008, rotate=TRUE, size=2)
p
dhc2008 <- as.dendrogram(hc2008)
# Obtenga la informaci<U+00F3>n, lineas son ortogonales
dhc_data2008 <- dendro_data(dhc2008, type = "rectangle")
# Estructura de dhc_data2008
str(dhc_data2008)
# Para darle formato a la imagen. Simplemente cambia las dimensiones del
# gr<U+00E1>fico
knitr::opts_chunk$set(fig.width = 15, fig.height = 10, fig.path = "Figs/", echo = TRUE,
warning = FALSE, message = FALSE)
# Function to color branches
colbranches <- function(n, col) {
a <- attributes(n) # Find the attributes of current node
# Color edges with requested color
attr(n, "edgePar") <- c(a$edgePar, list(col = col, lwd = 2))
n # Don't forget to return the node!
}
# Color the first sub-branch of the first branch in red, the second
# sub-branch in orange and the second branch in blue
dhc2008[[1]][[1]] = dendrapply(dhc2008[[1]][[1]], colbranches, "red")
dhc2008[[1]][[2]] = dendrapply(dhc2008[[1]][[2]], colbranches, "orange")
dhc2008[[2]][[2]][[1]][[2]][[2]] = dendrapply(dhc2008[[2]][[2]][[1]][[2]][[2]],
colbranches, "blue")
# Plot
plot(dhc2008)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
library(ggplot2)
library(ggdendro)
library(protoclust)
#str(mpg)
#Organizo la tabla
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
#creo IDs unicos y concateno con el manufacturer
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
library(ggplot2)
library(ggdendro)
library(protoclust)
#str(mpg)
#Organizo la tabla
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
#creo IDs unicos y concateno con el manufacturer
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=15)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=2, hang = 0)
#install.packages("ggplot2")
#install.packages("ggdendro")
#install.packages("protoclust")
library(ggplot2)
library(ggdendro)
library(protoclust)
#str(mpg)
#Organizo la tabla
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
#creo IDs unicos y concateno con el manufacturer
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=5)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=6, hang = 0)
#install.packages("ggplot2")
#install.packages("ggdendro")
#install.packages("protoclust")
library(ggplot2)
library(ggdendro)
library(protoclust)
#str(mpg)
#Organizo la tabla
mpg2008 <- subset(mpg,mpg$year == 2008)
mpg2008 <- mpg2008[complete.cases(mpg2008),]
head(mpg2008,3)
#creo IDs unicos y concateno con el manufacturer
mpg2008$ID <- seq(1,nrow(mpg2008))
mpg2008$ID <- do.call(paste0,mpg2008[c(1,12)])
rownames(mpg2008) <- mpg2008$ID
head(mpg2008,3)
# Normalizar columnas numericas
mpg2008N <- mpg2008
mpg2008N[,c(3,5,8,9)] <- scale(mpg2008[,c(3,5,8,9)])
head(mpg2008N,3)
dist2 <- dist(mpg2008N)
protoC <- protoclust(dist2)
# k corresponde al numero de prototipos que se quieren obtener
grupos <- protocut(protoC, k=10)
# Crea el gráfico
plotwithprototypes(protoC, imerge = grupos$imerge, col=6, hang = 0)
# y ahora vemos los porcentajes de personas de los dos sexos respecto a cuantos sobrevivieron
prop.table(table(train$Sex, train$Survived))
# agrego los datasets
train <-read.csv("train.csv")
test <- read.csv("test.csv")
# agrego los datasets
train <-read.csv("train.csv")
test <- read.csv("test.csv")
library(caret)
library(e1071)
library(ggplot2)
data(iris)
head(iris)
summary(iris)
str(iris)
table(iris$Species)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x = iris[, 1:3],
y = iris[, 4],
plot = "scatter",
layout = c(3, 1))
featurePlot(x=iris[,1:4],
y=iris[,5],
plot="density",
scales=list(x=list(relation="free"),
y=list(relation="free")),
auto.key=list(columns=3))
featurePlot(x=iris[,1:4],
y=iris[,5],
plot="box",
scales=list(x=list(relation="free"), y=list(relation="free")),
auto.key=list(columns=3))
ggplot(data=iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) + geom_point(size=2, alpha=.5)
LETTERS
sample(LETTERS, 5)
sample(LETTERS, 5)
set.seed(42)#permite reproducir un resultado de un algoritmo random
sample(LETTERS, 5)
set.seed(42)
sample(LETTERS, 5)
set.seed(3456)
trainIndex <- createDataPartition(iris$Species,
p = .8, list = FALSE,
times = 1)
length(trainIndex)
head(trainIndex, 10)
trainIndex2 <- createDataPartition(iris$Species,
p = .8, list = FALSE,
times = 2)
length(trainIndex2)
head(trainIndex2, 10)
irisTrain <- iris[ trainIndex,]
irisTest <- iris[-trainIndex,]#- significa que me traigan los ?nidices que no son pertenecients a train
model_knn1 <- train(irisTrain[, 1:4], irisTrain[, 5], method='knn')
library(ggplot2)
library(caret)
library(e1071)
library(ISLR)
install.packages("ISLR")
library(ggplot2)
library(caret)
library(e1071)
library(ISLR)
ggplot(data=Default, aes(x=balance, y=income, color=default)) + geom_point(size=2, alpha=.5)
featurePlot(x=Default[,c("balance", "income", "student")], y=Default$default, plot="pairs")
modelo <- train(default~., data = Default, method = "knn")
modelo
modelo$bestTune # el K Optimo encontrado con la configuraciOn utilizada (la que viene por defecto)
modelo$finalModel #explica el tipo de modelo aprendido
plot(modelo) # evoluci?n de la m?trica en funcion del K
library(caret)
train <- read.csv("train.csv")
setwd("~/Documents/universidad/2017-2/AnalisisAndVisualizacion class stuff by velasco/exercises/titanicPrediction-Exercice")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
train <- na.omit(train)
test <- na.omit(test)
table(train[,"Survived"])
train$Survived <- as.character(train$Survived)
trainingDs_RandomForest <- train(train[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")],
train[,"Survived"], method="rf")
resultados <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
head(predicted)
library(caret)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
train <- na.omit(train)
test <- na.omit(test)
table(train[,"Survived"])
train$Survived <- as.character(train$Survived)
trainingDs_RandomForest <- train(train[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")],
train[,"Survived"], method="rf")
head(predicted)
predicted <- predict(trainingDs_RandomForest,
newdata = test[, c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare")])
head(predicted)
resultados <- data.frame(PassengerId = test$PassengerId, Survived = predicted)
write.csv(resultados, file = "finished_prediction.csv", row.names = FALSE)
library(caret)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
train <- na.omit(train)
test <- na.omit(test)
table(train[,"Survived"])
train$Survived <- as.character(train$Survived)
trainingDs_RandomForest <- train(train[, c("Pclass", "Sex", "Age", "Fare")],
train[,"Survived"], method="rf")
library(caret)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
str(train)
train$Survived <- as.character(train$Survived)
trainingDs_RandomForest <- train(train[, c("Pclass", "Sex", "Age", "Fare")],
train[,"Survived"], method="rf")
train$Survived <- as.character(train$Survived)
trainingDs_RandomForest <- train(train[, c("Sex", "Age", "Fare")],
train[,"Survived"], method="rf")
